{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./web.service\";\n// THINK: This module is like an API that\n//        the event handlers for the view\n//        will call. The methods in this\n//        module will then makes calls to\n//        an actual, proper API (that in\n//        this project we've defined in\n//        the backend directory). Thus, it's\n//        like a pseudo-API calling an actual\n//        API.\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService {\n    constructor(webService) {\n      this.webService = webService;\n    }\n    getLists() {\n      return this.webService.get(\"lists\");\n    }\n    createList(title) {\n      return this.webService.post(\"lists\", {\n        title\n      });\n    }\n    getTask(listId) {\n      return this.webService.get(`lists/${listId}/tasks`);\n    }\n    createTask(listId, title) {\n      return this.webService.post(`lists/${listId}/tasks/`, {\n        title\n      });\n    }\n    deleteList(listId) {\n      return this.webService.delete(`lists/${listId}`);\n    }\n    deleteTask(listId, taskId) {\n      return this.webService.delete(`lists/${listId}/tasks/${taskId}`);\n    }\n    setCompleted(listId, task) {\n      return this.webService.patch(`lists/${listId}/tasks/${task._id}`, {\n        completed: !task.completed\n      });\n    }\n    static #_ = this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.WebService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TaskService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}